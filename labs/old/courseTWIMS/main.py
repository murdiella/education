import numpy as np
import math as m
from scipy import stats
import matplotlib.pyplot as plt


# функция рассчета выборочного среднего
def avg(array):
    return np.average(array)


# функция рассчета выборочного коэффициента корреляции
def corr(X, Y):
    AvgX = avg(X)
    AvgY = avg(Y)

    sum1 = 0
    sum2 = 0
    sum3 = 0
    # len(X) = len(Y) по условию задачи
    for i in range(len(X)):
        sum1 += (X[i] - AvgX) * (Y[i] - AvgY)
        sum2 += (X[i] - AvgX) ** 2
        sum3 += (Y[i] - AvgY) ** 2

    return sum1 / m.sqrt(sum2 * sum3)


# функция для получения коэффициентов линейной модели в виде списка [a, b]
# при изменении модели тут нужно изменить рассчет матрицы А
def linModel(X, Y):
    A = []
    for i in range(len(X)):
        A.append([X[i], 1])

    A = np.array(A)
    AtA = np.linalg.inv(np.matmul(np.transpose(A), A))
    AtY = np.matmul(np.transpose(A), Y)
    return np.matmul(AtA, AtY).tolist()


# функция, соответствующая нашей линейной модели
# при изменении модели, нужно будет заменить данную модель на новую
def func(x, a, b):
    return a * x + b


# функция для вычисления дисперсии ошибок
def errDisp(X, Y):
    a, b = linModel(X, Y)
    theta = np.array([a, b])
    A = []
    for i in range(len(X)):
        A.append([X[i], 1])
    A = np.array(A)
    eps = np.subtract(Y, np.matmul(A, theta)).tolist()
    summ = 0
    for item in eps:
        summ += item ** 2
    return summ / (len(X) - len(theta.tolist()))


# фукнция для вычисления коэфициента детерминации (критерий R^2)
# при изменении модели меняется ввод функции func()
def det(X, Y):
    a, b = linModel(X, Y)
    summ1 = 0
    for i in range(len(X)):
        summ1 += (Y[i] - func(X[i], a, b)) ** 2
    summ2 = 0
    avgY = avg(Y)
    for i in range(len(X)):
        summ2 += (Y[i] - avgY) ** 2
    return 1 - (summ1 / (len(X) - len(linModel(X, Y)))) / (summ2 / (len(X) - 1))


# фукнция для построения доверительного интервала
# меняется при изменении вида модели
def confInterval(X, Y):
    params = linModel(X, Y)
    # так как ничего не сказано об уровне надежности, берем его равным alpha = 0.05 => 1 - alpha / 2 = 0.975
    t = stats.t(df=len(X) - len(params)).ppf(0.975)  # 1.97 в нашем случае

    # c11, c22... из матрицы (At A)^-1
    A = []
    for i in range(len(X)):
        A.append([X[i], 1])

    A = np.array(A)
    AtA = np.linalg.inv(np.matmul(np.transpose(A), A)).tolist()

    a, b = params
    # S_theta взял из det(X, Y)
    S_theta = 0
    for i in range(len(X)):
        S_theta += (Y[i] - func(X[i], a, b)) ** 2

    letters = ['a', 'b']
    print("Доверительные интервалы оцениваемых параметров модели:")
    for i in range(len(params)):
        print(f"{params[i] - t * m.sqrt((S_theta * AtA[i][i]) / (len(X) - len(params)))} =< {letters[i]} =< {params[i] + t * m.sqrt((S_theta * AtA[i][i]) / (len(X) - len(params)))}")


# функция построения множества точек и прямой
# при изменении модели менять построение графика модели
def graph(X, Y):
    plt.plot(X, Y, "o", markersize=2, color='blue')
    plt.ylabel('Цена за акцию Сургутнефтегаза')
    plt.xlabel('Индекс RTSI')

    a, b = linModel(X, Y)
    model = []
    for i in range(len(X)):
        model.append(func(X[i], a, b))
    plt.plot(X, model, color='red')

    plt.show()
    # для сохранения картинки
    # plt.savefig("graph.png")


# фукнция построения гистограммы
def histogram(X, Y):
    a, b = linModel(X, Y)
    theta = np.array([a, b])
    A = []
    for i in range(len(X)):
        A.append([X[i], 1])
    A = np.array(A)
    eps = np.subtract(Y, np.matmul(A, theta)).tolist()
    L = m.sqrt(len(X)) // 1
    L = int(L)
    delta = (max(eps) - min(eps)) / (L - 1)
    histdata = []
    for _ in range(L + 1):
        histdata.append(None)
    eps.sort()

    upper_border = min(eps)
    i = 0
    for item in eps:
        if item < upper_border:
            if histdata[i] is None:
                histdata[i] = 1
            elif isinstance(histdata[i], int):
                histdata[i] += 1
            else:
                raise Exception('В histdata неверный тип')
        else:
            upper_border += delta
            histdata[i + 1] = 1
            i += 1
    histdata[0] = 0
    if histdata[-1] == 1:
        histdata[-2] += 1
    histdata[-1] = 0
    histdata = [item / (len(X) * delta) for item in histdata]

    histXAxis = [f"{round(min(eps) + delta * i, 2)}" for i in range(L-1)]
    histXAxis.insert(0, '')
    histXAxis.append(f'{round(max(eps), 1)}')

    plt.bar(histXAxis, histdata, width=1, align='edge', edgecolor='black')
    plt.xticks(rotation=90)
    plt.show()


# основная функция для вызова скриптов
def main():
    # наш Х -- цена на акцию Сургутнефтегаза
    SNGS = [26.785, 27.045, 27.01, 27.07, 27.435, 27.63, 27.975, 28.165, 27.91, 27.8, 28.025, 27.865, 27.93, 27.89,
            27.315, 27.535, 27.355, 27.435, 27.445, 27.355, 27.415, 27.4, 27.475, 27.32, 27.05, 26.845, 26.7, 26.81,
            26.26, 26.48, 26.83, 26.485, 26.375, 26.75, 26.435, 26.475, 26.4, 26.24, 26.07, 25.69, 25.56, 25.4, 25.385,
            25.39, 25.2, 24.73, 24.61, 24.215, 24.16, 24.2, 24.75, 25.0, 24.88, 24.895, 24.525, 24.535, 24.58, 24.595,
            24.6, 24.875, 25.305, 25.12, 25.23, 25.475, 25.365, 25.5, 25.54, 25.3, 25.2, 25.31, 24.89, 25.05, 25.14,
            25.08, 25.075, 25.05, 24.72, 24.605, 24.81, 24.825, 24.71, 24.565, 24.555, 24.985, 24.91, 24.915, 24.6,
            24.2, 24.14, 24.15, 24.14, 24.18, 24.105, 24.15, 24.26, 24.2, 24.18, 24.365, 24.37, 24.46, 24.73, 24.99,
            24.94, 25.115, 25.07, 25.205, 25.26, 25.2, 25.08, 25.39, 25.08, 25.175, 25.15, 25.28, 25.41, 25.94, 25.825,
            26.0, 25.92, 26.285, 26.32, 26.34, 26.37, 26.735, 26.8, 26.85, 26.8, 26.92, 27.2, 27.145, 26.705, 26.79,
            26.57, 26.83, 26.405, 26.265, 26.385, 25.995, 26.63, 26.63, 26.6, 26.105, 26.725, 26.91, 27.06, 27.08,
            26.81, 26.335, 26.0, 26.07, 26.1, 26.245, 26.645, 26.595, 26.1, 25.8, 25.8, 25.875, 26.055, 25.845, 25.55,
            25.625, 25.515, 26.095, 26.275, 26.54, 27.45, 30.825, 35.5, 35.395, 33.65, 33.45, 33.06, 33.59, 36.0,
            36.395, 37.38, 37.7, 36.455, 35.505, 35.7, 35.495, 35.6, 34.95, 34.545, 34.715, 34.835, 35.4, 35.995, 35.05,
            35.585, 35.225, 36.0, 36.09, 36.435, 36.54, 36.725, 36.25, 35.96, 36.725, 36.2, 36.17, 36.04, 36.725, 40.17,
            43.55, 46.58, 44.6, 44.55, 43.4, 43.0, 46.255, 46.115, 46.22, 47.29, 46.655, 48.545, 47.935, 47.79, 47.3,
            46.45, 46.33, 46.8, 46.47, 45.875, 46.73, 46.185, 45.0, 44.51, 43.645, 44.1, 43.27, 42.54, 43.7, 43.2,
            43.345, 43.93, 43.39, 45.035, 48.2, 47.505, 48.025, 48.305, 48.42, 48.15, 48.115, 51.655, 52.2, 51.205,
            51.15, 50.855, 50.47]
    # наш У -- индекс RTSI
    RTSI = [1086.8, 1118.03, 1122.9, 1135.51, 1142.32, 1148.75, 1147.16, 1148.03, 1152.99, 1157.06, 1176.42, 1171.09,
            1169.79, 1186.51, 1188.15, 1192.02, 1178.91, 1191.38, 1198.99, 1214.45, 1211.23, 1211.15, 1223.48, 1215.83,
            1200.14, 1199.65, 1201.33, 1215.47, 1190.79, 1156.31, 1177.5, 1177.04, 1173.64, 1194.4, 1188.6, 1198.4,
            1201.57, 1193.07, 1191.01, 1188.28, 1187.35, 1185.83, 1180.15, 1191.51, 1179.58, 1176.71, 1183.34, 1189.14,
            1181.96, 1196.75, 1213.35, 1219.78, 1226.26, 1237.68, 1213.4, 1228.34, 1229.96, 1207.23, 1207.31, 1198.11,
            1214.29, 1216.2, 1224.35, 1219.94, 1225.84, 1240.16, 1248.38, 1262.48, 1245.17, 1253.44, 1246.99, 1255.45,
            1265.51, 1262.28, 1260.82, 1275.59, 1277.71, 1263.97, 1245.98, 1247.01, 1254.96, 1248.39, 1238.05, 1248.39,
            1245.59, 1237.86, 1233.05, 1213.79, 1207.57, 1241.51, 1247.02, 1261.33, 1254.68, 1256.22, 1279.12, 1292.79,
            1275.42, 1279.11, 1288.12, 1271.15, 1275.92, 1286.52, 1287.09, 1315.22, 1307.55, 1303.35, 1319.85, 1325.95,
            1335.71, 1343.33, 1346.98, 1341.05, 1340.9, 1359.23, 1361.14, 1391.21, 1375.02, 1387.06, 1380.87, 1386.63,
            1388.07, 1380.52, 1401.64, 1398.26, 1401.52, 1411.53, 1398.75, 1399.55, 1394.86, 1407.64, 1398.88, 1387.87,
            1386.52, 1382.09, 1361.58, 1349.76, 1350.69, 1341.17, 1345.48, 1339.62, 1346.91, 1348.3, 1353.61, 1352.89,
            1360.04, 1346.4, 1293.19, 1282.29, 1294.5, 1284.91, 1303.8, 1289.47, 1294.12, 1297.85, 1259.68, 1250.13,
            1239.81, 1247.53, 1264.59, 1280.19, 1282.63, 1268.45, 1268.25, 1258.6, 1266.71, 1284.94, 1293.32, 1309.22,
            1303.49, 1330.77, 1337.92, 1340.52, 1340.14, 1343.95, 1354.68, 1361.05, 1368.93, 1396.09, 1381.5, 1382.16,
            1378.06, 1377.38, 1373.49, 1358.8, 1354.01, 1359.59, 1347.72, 1333.91, 1329.37, 1313.75, 1307.01, 1311.65,
            1320.25, 1306.39, 1317.48, 1330.92, 1329.63, 1321.13, 1331.03, 1347.43, 1353.49, 1355.27, 1365.14, 1387.68,
            1392.47, 1413.63, 1421.2, 1411.92, 1424.05, 1431.9, 1422.92, 1455.44, 1460.5, 1471.38, 1487.03, 1468.17,
            1460.84, 1449.35, 1437.85, 1436.98, 1449.42, 1443.02, 1451.64, 1448.4, 1454.74, 1455.42, 1454.63, 1440.95,
            1441.08, 1439.18, 1438.45, 1432.81, 1414.06, 1430.03, 1430.39, 1448.34, 1456.79, 1454.23, 1463.15, 1496.96,
            1501.42, 1517.16, 1520.6, 1522.51, 1519.49, 1523.77, 1535.0, 1540.46, 1544.12, 1534.85, 1549.4, 1548.92]

    # получившееся значения в курсовой работе по коду:
    # avg(SNGS) = 31.188
    # avg(RTSI) = 1311.957
    # corr(SNGS, RTSI) = 0.789
    # linModel(SNGS, RTSI) ~ y = ax + b
    # a = 9.809, b = 1006.033
    # 8.856 =< a =< 10.762
    # 975.303 =< a =< 1036.7633
    # D = 3983.537
    # R^2 = 0.620
    # delta = 23.149
    # max(eps) = 142.125
    # min(eps) = -181.967

    # здесь можно вписать любой вызов и запустить программу
    # print(corr(RTSI, SNGS))
    # print(linModel(RTSI, SNGS))
    # print(errDisp(RTSI, SNGS))
    # confInterval(RTSI, SNGS)
    # print(det(RTSI, SNGS))
    # histogram(RTSI, SNGS)
    # graph(RTSI, SNGS)


if __name__ == '__main__':
    main()
